<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>mattdietz.net (programming)</title><link>http://mattdietz.net/</link><description></description><atom:link href="http://mattdietz.net/categories/programming.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Mon, 24 Aug 2015 03:19:50 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Installing SFML from Source on OSX</title><link>http://mattdietz.net/posts/installing-sfml-from-source.html</link><dc:creator>Matt Dietz</dc:creator><description>&lt;div&gt;&lt;p&gt;It's fairly easy to install SFML from source on OSX. Following the instructions in &lt;a href="http://www.sfml-dev.org/tutorials/2.3/compile-with-cmake.php"&gt;Compiling SFML with CMake&lt;/a&gt; you'll need CMake. The problem is CMake isn't included with OSX default. Fortunately, &lt;a href="http://brew.sh/"&gt;Homebrew&lt;/a&gt; remedies that for us. Simply follow the instructions on the Homebrew site to get started.&lt;/p&gt;
&lt;p&gt;Once that finishes installing, follow the current brew instructions for updating your formula list. Then, simply install CMake:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;    brew install cmake
&lt;/pre&gt;


&lt;p&gt;Notice I omitted sudo. That's because homebrew installs everything under /usr/local/, and you're going to have a bad time if random bits and pieces under that hierarchy are owned by root.&lt;/p&gt;
&lt;p&gt;Next, snag SFML from source, cd into the cloned directory, and then kick off CMake&lt;/p&gt;
&lt;pre class="code literal-block"&gt;    git clone https://github.com/SFML/SFML.git
    cd SFML
    cmake CMakeLists.txt
&lt;/pre&gt;


&lt;p&gt;Once CMake finishes running (it'll take a couple seconds) you'll have our old friend Makefile generated in the local directory. You probably know what to do at this point&lt;/p&gt;
&lt;pre class="code literal-block"&gt;    make
    sudo make install
&lt;/pre&gt;


&lt;p&gt;At this point, you should have some fancy new headers and libraries under /usr/local. Congrats!&lt;/p&gt;
&lt;p&gt;P.S. I'm a masochist and like to build SFML games from the command line, so I found out the hard way that /usr/local/include and /usr/local/lib aren't in your default search path. To tell clang you want it to look somewhere else, give it the -I (include path) and -L (library path) flags.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;    CFLAGS=-L/usr/local/lib -I/usr/local/include ...
&lt;/pre&gt;&lt;/div&gt;</description><category>gamedev</category><category>programming</category><category>SFML</category><category>tutorials</category><guid>http://mattdietz.net/posts/installing-sfml-from-source.html</guid><pubDate>Sun, 23 Aug 2015 05:57:05 GMT</pubDate></item><item><title>Using an Arduino to burn bootloaders</title><link>http://mattdietz.net/posts/using-an-arduino-to-burn-bootloaders.html</link><dc:creator>Matt Dietz</dc:creator><description>&lt;div&gt;&lt;p&gt;A few years ago, my wife decided to buy me a bare bones, electronics learning kit called a &lt;a href="http://www.nerdkits.com/"&gt;Nerdkit&lt;/a&gt;. You can think of it as an &lt;a href="http://en.wikipedia.org/wiki/Arduino"&gt;Arduino&lt;/a&gt; on a &lt;a href="http://en.wikipedia.org/wiki/Breadboard"&gt;breadboard&lt;/a&gt;. Included in the kit are various sensors as well as a wonderful little guide walking you through the setup and introducing a lot of basic electronics concepts like &lt;a href="http://en.wikipedia.org/wiki/Ohm%27s_law"&gt;Ohms Law&lt;/a&gt;. Whereas an Arduino is a great jumping off point for creating lots of amazing projects quickly, it abstracts a lot of the nitty-gritty that I like to get into. It's kind of like learning to program in BASIC before tackling a lower-level language; more programmers than ever get through their entire career without knowing C, and I'm sure a lot of electronics hobbyists don't care to learn AVR-C or what makes a &lt;a href="http://arduino.cc/en/Hacking/Bootloader?from=Tutorial.Bootloader"&gt;bootloader&lt;/a&gt; work. This is why I like the Nerdkit so much: you're essentially building an Arduino from scratch.&lt;/p&gt;
&lt;p&gt;Whilst tinkering with said Nerdkit in the first few months, I managed to corrupt the bootloader on the chip. No matter what I tried, I couldn't flash new programs. Hours of frustration later, the Nerdkit ended up in a box in favor of less complicated things. Fast-forward a few years, and I find the Nerdkit and all the pieces in a box, and the memories of defeat come flooding back and so I decided this time I was going to get it working.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://mattdietz.net/posts/using-an-arduino-to-burn-bootloaders.html"&gt;Read moreâ€¦&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>electronics</category><category>nerd</category><category>nerdkit</category><category>programming</category><guid>http://mattdietz.net/posts/using-an-arduino-to-burn-bootloaders.html</guid><pubDate>Sun, 12 Apr 2015 19:55:14 GMT</pubDate></item></channel></rss>