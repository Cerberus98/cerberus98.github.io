<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>mattdietz.net</title><link>http://mattdietz.net</link><description>Aspiring Jazz Programmer</description><lastBuildDate>Sun, 13 Apr 2014 00:18:27 GMT</lastBuildDate><generator>nikola</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Team Communication and the Least Common Denominator</title><link>http://mattdietz.net/posts/team-communication-and-the-lcd.html</link><description>&lt;p&gt;A recent Hacker News post mentioned producing crap. I've been so focused on trying to only put good things online that I've avoided just writing anything that may be less than optimal which, as the post suggested, implied that I'd never write anything at all. As such, I've decided to write about team communication, both externally and internally.&lt;/p&gt;
&lt;p&gt;One of the things my team is struggling is communication, especially when it comes to remote workers. My belief is that you need to "lower" the tier of communication to the level of the most disadvantaged co-worker. If everyone is available and in-person, bringing all the relevant people into the conversation face-to-face is the optimal solution. Meanwhile, if at least one person is in another city, state or country, everyone should communicate as much as possible using the most convenient medium available to those peers. Be it Skype, IRC, email or even smoke signals, unless careful attention is paid to ensuring your co-workers stay in the loop, invariably someone will be left out of an important conversation and feelings will be hurt.&lt;/p&gt;
&lt;p&gt;Disclaimer: We have not objectively solved this proble, but my hope is we get a little better every day.&lt;/p&gt;
&lt;p&gt;So this leaves the team with a conundrum: the mechanism of communication is likely less optimal than a closed door room full of whiteboards. In otherwords, your situation sucks, but imagine how the remote developers feel. Emphasis should be placed on maximizing collaboration while minimizing frustrating interaction. This usually requires effort and often money, too. Where does that leave half remote, half local teams? Ideally, you split the remote and local developers into focus groups, so that in-person communication doesn't need to be reproduced for the one or more remote peers. To put it another way, no one wants to play the secretary, and if someone does, the remote end likely receives a less than optimal description of the localized conversation.&lt;/p&gt;
&lt;p&gt;In short, remote communication is a huge hurdle, and I don't think there are any easy answers, but the value of feeling like an equal contributor out weighs the pain of bridging the communication gaps.&lt;/p&gt;
&lt;p&gt;Tools that we like / ameliorate the problem:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="http://www.teamspeak.com/"&gt;Teamspeak&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;IRC - We use both &lt;a href="http://www.freenode.net"&gt;Freenode&lt;/a&gt; and an internal server.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://plus.google.com"&gt;Google Hangouts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tmux.sourceforge.net"&gt;tmux&lt;/a&gt; - Great for sharing and collaboration.&lt;/li&gt;
&lt;/ul&gt;</description><category>remote work</category><guid>http://mattdietz.net/posts/team-communication-and-the-lcd.html</guid><pubDate>Tue, 08 Apr 2014 19:32:25 GMT</pubDate></item><item><title>Compiling SFML for broader OS/X compatibility</title><link>http://mattdietz.net/posts/compiling-sfml-for-broader-osx-compatibility.html</link><description>&lt;p&gt;I recently competed in Ludum Dare 27, and one of the biggest struggles I had was making an application I built on the command line on my machine actually run for others. The first sign that I should have considered alternative frameworks was when I could only get SFML to link properly into my game when I built it from bleeding edge source. However, I'd been trucking along just fine using the compiled dylibs. I had been assuming the entire time that it was sufficient to include code and instructions for building the project yourself, but when the barrier to entry is too high, people will simply prefer all the Unity and HTML5 Canvas games. It's hard to blame them, really.&lt;/p&gt;
&lt;p&gt;So, I set out to figure out how to package up SFML with my binary and ship it. After stumbling through a bunch of mediocre attempts to include the SFML dylibs in the zip file I submitted ot the competition, I finally realized the only thing left to do was construct a Mac app bundle.&lt;/p&gt;
&lt;p&gt;Enter XCode.&lt;/p&gt;
&lt;p&gt;Getting my project set up was relatively easy, especially using the SFML templates that the SFML installer created for me. However, the first headache came when I tried to build the project against the default settings. After some Googling, I finally stumbled across a &lt;a href="http://www.sfml-dev.org/tutorials/2.0/start-osx.php"&gt;SFML Tutorial&lt;/a&gt; about setting up a "Hello World" style Xcode project using SFML. I proceeded to import all the files I'd been working on into XCode, triggered a build and... linker errors. I tried going back to installing the packaged SFML, to no avail. Switched back to compiling frameworks, but had issues with them (though I now realize why that route failed, more below.) and finally went back to where I started, building dylibs from source.&lt;/p&gt;
&lt;p&gt;After digging for a bit, I realized the errors I was getting were a lot better than I'd originally given them credit for. Namely, my issue is the default cmake settings for SFML only produce bleeding edge, current OS/X settings, and only for the active architecture. At this point, I should have realized toggling the architecture setting in XCode would have solved my framework issue, but I digress.&lt;/p&gt;
&lt;p&gt;Toggling the "architecture" flag did it! To find it in XCode 4.3, click on the folder icon on the left side, then click on the very top element, which is your project. The center pane will update, with new tabs across the top. Click on "Build Settings" and play with "Valid Architectures" setting. Following this, I had success! Well, mostly. None of my game content was actually in the bundle. Now, I'm no XCode expert, so I'm sure this is the wrong way to do things, but adding said content was as simple as a Right-Click -&amp;gt; "Show Contents" on the bundle. From there, I traversed through Contents -&amp;gt; MacOS and dumped all the files there. Finally, it worked! I zipped up the game, uploaded it, and sent it some friends.&lt;/p&gt;
&lt;p&gt;Immediate disaster! One of my friends is running OS/X 10.7, and was seeing errors about being unable to find SFML dylibs. Obviously, when you lose a weekend and large amounts of sleep to something you've built, you want others to at least see what you've done. Therefore, back to Google I went. I eventually stumbled on &lt;a href="http://www.mjbshaw.com/2013/02/building-sfml-2-with-c11-on-os-x.html"&gt;this blog&lt;/a&gt; where he describes building SFML with different CMake settings. Coupled with a Stack Overflow post that pointed out the obvious; that your linked libraries need to be built with an SDK version &amp;lt;= your project SDK version. Derp.&lt;/p&gt;
&lt;p&gt;The final pain was figuring out where the XCode SDKs had moved. Every link on Google said they should have been in /Developer, off the root. However, just like a million other annoying things, Lion moved it.&lt;/p&gt;
&lt;p&gt;The new location is under /Application/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs&lt;/p&gt;
&lt;p&gt;Anyway, here's the way to build SFML source:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;cmake&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;Unix&lt;/span&gt; &lt;span class="n"&gt;Makefiles&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;DCMAKE_OSX_ARCHITECTURES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;i386&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;x86_64&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;DSFML_INSTALL_XCODE4_TEMPLATES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;ON&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;DCMAKE_OSX_SYSROOT&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;Applications&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Xcode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Contents&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Developer&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Platforms&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;MacOSX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Developer&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;SDKs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;MacOSX10&lt;/span&gt;&lt;span class="mf"&gt;.7&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sdk&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;DCMAKE_OSX_DEPLOYMENT_TARGET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;10.7&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hope this helps someone!&lt;/p&gt;</description><category>SFML</category><category>games</category><category>C++</category><category>game programming</category><category>OSX</category><guid>http://mattdietz.net/posts/compiling-sfml-for-broader-osx-compatibility.html</guid><pubDate>Mon, 26 Aug 2013 21:04:39 GMT</pubDate></item><item><title>Ludum Dare, 18 Hours to go!</title><link>http://mattdietz.net/posts/ludum-dare-18-hours-to-go.html</link><description>&lt;p&gt;&lt;img alt="CDN Test Screenshot" src="http://71736c127cff565b91bf-0044c42a78e82872de2148fe3ea73ce3.r79.cf2.rackcdn.com/ludum01.png"&gt;&lt;/p&gt;</description><category>games</category><category>gaming</category><category>game programming</category><category>ludum dare</category><guid>http://mattdietz.net/posts/ludum-dare-18-hours-to-go.html</guid><pubDate>Sun, 25 Aug 2013 01:14:13 GMT</pubDate></item><item><title>CDN Test</title><link>http://mattdietz.net/posts/cdn-test.html</link><description>&lt;p&gt;&lt;img alt="CDN Test Screenshot" src="http://71736c127cff565b91bf-0044c42a78e82872de2148fe3ea73ce3.r79.cf2.rackcdn.com/scoundrel1.png"&gt;&lt;/p&gt;</description><guid>http://mattdietz.net/posts/cdn-test.html</guid><pubDate>Tue, 13 Aug 2013 00:39:53 GMT</pubDate></item></channel></rss>